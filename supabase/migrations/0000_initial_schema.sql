--
-- File: 0000_initial_schema.sql
-- Description: Sets up the initial database schema for the LawTime application.
--

-- 1. Create custom ENUM types
-- These types provide a controlled set of values for specific columns, ensuring data integrity.

CREATE TYPE public.profile_status AS ENUM (
    'active',
    'deleted'
);

CREATE TYPE public.task_source_type AS ENUM (
    'manual',
    'ocr',
    'asr'
);

CREATE TYPE public.task_file_role AS ENUM (
    'source',
    'attachment'
);

-- 2. Create the 'profiles' table
-- Stores public user data and app-specific settings.

CREATE TABLE public.profiles (
    id uuid NOT NULL PRIMARY KEY,
    display_name text,
    status public.profile_status NOT NULL DEFAULT 'active',
    default_alert_offset_minutes integer NOT NULL DEFAULT 1440, -- Default to 1 day (24 * 60)
    updated_at timestamp with time zone DEFAULT now()
);

-- Add foreign key constraint to link 'profiles' with 'auth.users'.
ALTER TABLE public.profiles
ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;

-- Add a comment to the table for clarity.
COMMENT ON TABLE public.profiles IS 'Stores public user data and application settings.';

-- 3. Create the 'clients' table
-- Stores client information, linked to a specific user.

CREATE TABLE public.clients (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL,
    client_name text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);

-- Add foreign key constraint to 'auth.users'.
ALTER TABLE public.clients
ADD CONSTRAINT clients_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

-- Add a unique constraint to prevent duplicate client names for the same user.
ALTER TABLE public.clients
ADD CONSTRAINT clients_user_id_client_name_key UNIQUE (user_id, client_name);

COMMENT ON TABLE public.clients IS 'Stores client information for each user.';

-- 4. Create the 'tasks' table
-- This is the core table for all scheduled events and tasks.

CREATE TABLE public.tasks (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL,
    client_id bigint,
    title text NOT NULL,
    event_time timestamp with time zone,
    location text,
    note text,
    is_completed boolean NOT NULL DEFAULT false,
    source_type public.task_source_type NOT NULL,
    notification_sent boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone DEFAULT now()
);

-- Add foreign key constraints.
ALTER TABLE public.tasks
ADD CONSTRAINT tasks_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

ALTER TABLE public.tasks
ADD CONSTRAINT tasks_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id) ON DELETE SET NULL;

-- Create a composite index for efficient querying of tasks that need notifications.
CREATE INDEX tasks_notification_query_idx ON public.tasks (notification_sent, is_completed, event_time);

COMMENT ON TABLE public.tasks IS 'The central table for all scheduled and unscheduled events.';

-- 5. Create the 'task_files' table
-- Links uploaded files (sources or attachments) to specific tasks.

CREATE TABLE public.task_files (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id bigint NOT NULL,
    user_id uuid NOT NULL,
    role public.task_file_role NOT NULL,
    file_name text NOT NULL,
    storage_path text NOT NULL,
    mime_type text,
    created_at timestamp with time zone DEFAULT now()
);

-- Add foreign key constraints.
-- ON DELETE CASCADE ensures that if a task is deleted, all its associated file records are also deleted.
ALTER TABLE public.task_files
ADD CONSTRAINT task_files_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(id) ON DELETE CASCADE;

ALTER TABLE public.task_files
ADD CONSTRAINT task_files_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

COMMENT ON TABLE public.task_files IS 'Stores metadata for files associated with tasks.';

-- 6. Create the 'user_devices' table
-- Stores push notification tokens for each user's devices.

CREATE TABLE public.user_devices (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL,
    push_token text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);

-- Add foreign key constraint.
ALTER TABLE public.user_devices
ADD CONSTRAINT user_devices_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

-- Add a unique constraint to prevent storing the same push token multiple times.
ALTER TABLE public.user_devices
ADD CONSTRAINT user_devices_push_token_key UNIQUE (push_token);

COMMENT ON TABLE public.user_devices IS 'Stores push tokens for sending notifications.';
