import { useCallback } from 'react';
import { useClients } from '@/hooks/data/useClients';
import { useProcessing } from '@/hooks/infrastructure/useProcessing';
import { useAIWorkflowStore } from '@/stores/useAIWorkflowStore';
import { Attachment } from '@/types';
import AIService from '@/services/aiService';

interface UseAIProcessingParams {
  onSuccess?: (taskCount: number) => void;
  onError?: (error: string) => void;
}

/**
 * Business logic hook for AI file processing operations
 * Responsibilities:
 * - File validation and preparation
 * - AI service integration
 * - Result handling and store updates
 * - Error management
 */
export function useAIProcessing({ onSuccess, onError }: UseAIProcessingParams = {}) {
  const { clients } = useClients();
  const { startAIProcessing, stopProcessing } = useProcessing();
  const { setTasks, setProcessing, reset } = useAIWorkflowStore();

  const processFiles = useCallback(async (
    attachments: Attachment[],
    sourceType: 'ocr' | 'asr'
  ) => {
    try {
      // Reset previous workflow state
      reset();
      setProcessing(true);
      startAIProcessing();

      // Extract temporary files with public URLs
      const tempFiles = attachments.filter(att => att.isTemporary);
      const fileUrls = tempFiles
        .filter(att => (att as any).publicUrl)
        .map(att => (att as any).publicUrl!);

      if (fileUrls.length === 0) {
        console.warn('No valid file URLs found for AI processing');
        onError?.('No valid files found for processing');
        return;
      }

      // Prepare client context for AI
      const clientContext = clients.map(client => ({
        id: client.id,
        client_name: client.client_name
      }));

      // Call AI service
      const aiService = AIService.getInstance();
      const response = await aiService.proposeTasks({
        source_type: sourceType,
        source_file_urls: fileUrls,
        client_list: clientContext
      });

      // Handle response
      if (response.success && response.proposed_tasks?.length > 0) {
        setTasks(response.proposed_tasks, sourceType);
        console.log(`AI generated ${response.proposed_tasks.length} tasks`);
        onSuccess?.(response.proposed_tasks.length);
      } else {
        console.warn('No tasks generated by AI');
        onError?.('AI could not extract any tasks from the provided files');
      }
    } catch (error) {
      console.error('AI processing failed:', error);
      const errorMessage = error instanceof Error ? error.message : 'AI processing failed';
      onError?.(errorMessage);
    } finally {
      setProcessing(false);
      stopProcessing();
    }
  }, [
    clients,
    setTasks,
    setProcessing,
    reset,
    startAIProcessing,
    stopProcessing,
    onSuccess,
    onError
  ]);

  const isProcessing = useAIWorkflowStore(state => state.isProcessing);

  return {
    processFiles,
    isProcessing,
  };
}